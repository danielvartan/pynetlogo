[
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "pynetlogo",
    "section": "Overview",
    "text": "Overview\nThis document reproduces the examples of the pynetlogo Python package, which provides an interface to control NetLogo from Python. These examples are available in the package documentation."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "pynetlogo",
    "section": "Installation",
    "text": "Installation\nInstall pynetlogo and other dependencies in a virtual environment:\npython -m venv .venv\nsource .venv/bin/activate\npip install pynetlogo\n\npip install ipyparallel\npip install multiprocessing\npip install nbclient\npip install nbformat\npip install openpyxl\npip install pyyaml\npip install SALib\npip install sobol\nYou will also need to ensure that the path to Java Virtual Machine (JVM) is properly configured in the JAVA_HOME environment variable. You can set this variable in your shell configuration file (e.g., .bashrc):\nFor Arch Linux, use:\nexport JAVA_HOME=\"/usr/lib/jvm/default\""
  },
  {
    "objectID": "index.html#example-1",
    "href": "index.html#example-1",
    "title": "pynetlogo",
    "section": "Example 1",
    "text": "Example 1\n\n\n\n\n\n\nSee the this example at: https://pynetlogo.readthedocs.io/en/latest/_docs/introduction.html\n\n\n\n\n%matplotlib inline\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nsns.set_style(\"white\")\nsns.set_context(\"talk\")\n\n\nimport pynetlogo\n\nnetlogo = pynetlogo.NetLogoLink(\n    gui = True,\n    thd = False,\n    netlogo_home = \"/opt/netlogo-7-0-0\"\n)\n\nWARNING: A restricted method in java.lang.System has been called\nWARNING: java.lang.System::load has been called by org.jpype.JPypeContext in an unnamed module (file:/home/danielvartan/Git/pynetlogo/.venv/lib/python3.13/site-packages/org.jpype.jar)\nWARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for callers in this module\nWARNING: Restricted methods will be blocked in a future release unless native access is enabled\n\nWARNING: A terminally deprecated method in sun.misc.Unsafe has been called\nWARNING: sun.misc.Unsafe::objectFieldOffset has been called by scala.runtime.LazyVals$ (file:/opt/netlogo-7-0-0/lib/app/scala3-library_3-3.7.0.jar)\nWARNING: Please consider reporting this to the maintainers of class scala.runtime.LazyVals$\nWARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release\nSLF4J(W): No SLF4J providers were found.\nSLF4J(W): Defaulting to no-operation (NOP) logger implementation\nSLF4J(W): See https://www.slf4j.org/codes.html#noProviders for further details.\nSep 26, 2025 2:00:38 AM com.sun.javafx.application.PlatformImpl startup\nWARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @5d5d9e5'\n\n\n\nnetlogo.load_model(\"./nlogox/Wolf Sheep Predation_v6.nlogox\")\nnetlogo.command(\"setup\")\n\n\nagent_xy = pd.read_excel(\"./data/xy_DataFrame.xlsx\")\nagent_xy[[\"who\", \"xcor\", \"ycor\"]].head(5)\n\n\n\n\n\n\n\n\nwho\nxcor\nycor\n\n\n\n\n0\n0\n-24.000000\n-24.000000\n\n\n1\n1\n-23.666667\n-23.666667\n\n\n2\n2\n-23.333333\n-23.333333\n\n\n3\n3\n-23.000000\n-23.000000\n\n\n4\n4\n-22.666667\n-22.666667\n\n\n\n\n\n\n\n\nnetlogo.write_NetLogo_attriblist(agent_xy[[\"who\", \"xcor\", \"ycor\"]], \"a-sheep\")\n\n\nx = netlogo.report(\"map [s -&gt; [xcor] of s] sort sheep\")\ny = netlogo.report(\"map [s -&gt; [ycor] of s] sort sheep\")\n\n\nfig, ax = plt.subplots(1)\n\nax.scatter(x, y, s=4)\nax.set_xlabel(\"xcor\")\nax.set_ylabel(\"ycor\")\nax.set_aspect(\"equal\")\nfig.set_size_inches(5, 5)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n# We can use either of the following commands to run for 100 ticks:\n\nnetlogo.command(\"repeat 100 [go]\")\n# netlogo.repeat_command('go', 100)\n\n\n# Return sorted arrays so that the x, y and energy properties of each agent are in the same order\nx = netlogo.report(\"map [s -&gt; [xcor] of s] sort sheep\")\ny = netlogo.report(\"map [s -&gt; [ycor] of s] sort sheep\")\nenergy_sheep = netlogo.report(\"map [s -&gt; [energy] of s] sort sheep\")\n\nenergy_wolves = netlogo.report(\"[energy] of wolves\")  # NetLogo returns these in random order\n\n\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\nfig, ax = plt.subplots(1, 2)\n\nsc = ax[0].scatter(x, y, s=50, c=energy_sheep, cmap=plt.cm.coolwarm)\nax[0].set_xlabel(\"xcor\")\nax[0].set_ylabel(\"ycor\")\nax[0].set_aspect(\"equal\")\ndivider = make_axes_locatable(ax[0])\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\ncbar = plt.colorbar(sc, cax=cax, orientation=\"vertical\")\ncbar.set_label(\"Energy of sheep\")\n\nsns.histplot(energy_sheep, kde=False, bins=10, ax=ax[1], label=\"Sheep\")\nsns.histplot(energy_wolves, kde=False, bins=10, ax=ax[1], label=\"Wolves\")\nax[1].set_xlabel(\"Energy\")\nax[1].set_ylabel(\"Counts\")\nax[1].legend()\nfig.set_size_inches(14, 5)\n\nplt.show()\n\n\n\n\n\n\n\n\n\ncounts = netlogo.repeat_report([\"count wolves\", \"count sheep\"], 200, go=\"go\")\n\n\ncounts = pd.DataFrame(counts)\n\n\nfig, (ax1, ax2) = plt.subplots(1, 2)\n\ncounts.plot(ax=ax1, use_index=True, legend=True)\nax1.set_xlabel(\"Ticks\")\nax1.set_ylabel(\"Counts\")\n\nax2.plot(counts[\"count wolves\"], counts[\"count sheep\"])\nax2.set_xlabel(\"Wolves\")\nax2.set_ylabel(\"Sheep\")\n\n\nfor ax in [ax1, ax2]:\n    ax.set_aspect(1 / ax.get_data_ratio())\n\n\nfig.set_size_inches(12, 5)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nresults = netlogo.repeat_report(\n    [\n        \"[energy] of wolves\",\n        \"[energy] of sheep\",\n        \"[sheep_str] of sheep\",\n        \"count sheep\",\n        \"glob_str\",\n    ],\n    5,\n)\n\nfig, ax = plt.subplots(1)\n\nsns.histplot(results[\"[energy] of wolves\"][-1], kde=False, bins=20, ax=ax)\nax.set_xlabel(\"Energy\")\nax.set_ylabel(\"Counts\")\nfig.set_size_inches(4, 4)\n\nplt.show()\n\n\n\n\n\n\n\n\n\nlist(results.keys())\n\n['[energy] of wolves',\n '[energy] of sheep',\n '[sheep_str] of sheep',\n 'count sheep',\n 'glob_str']\n\n\n\ncountdown_df = netlogo.patch_report(\"countdown\")\n\nfig, ax = plt.subplots(1)\n\npatches = sns.heatmap(\n    countdown_df, xticklabels=5, yticklabels=5, cbar_kws={\"label\": \"countdown\"}, ax=ax\n)\nax.set_xlabel(\"pxcor\")\nax.set_ylabel(\"pycor\")\nax.set_aspect(\"equal\")\nfig.set_size_inches(8, 4)\n\nplt.show()\n\n\n\n\n\n\n\n\n\ncountdown_df.to_excel(\"countdown.xlsx\")\nnetlogo.patch_set(\"countdown\", countdown_df.max() - countdown_df)\n\n\ncountdown_update_df = netlogo.patch_report(\"countdown\")\n\nfig, ax = plt.subplots(1)\n\npatches = sns.heatmap(\n    countdown_update_df,\n    xticklabels=5,\n    yticklabels=5,\n    cbar_kws={\"label\": \"countdown\"},\n    ax=ax,\n)\nax.set_xlabel(\"pxcor\")\nax.set_ylabel(\"pycor\")\nax.set_aspect(\"equal\")\nfig.set_size_inches(8, 4)\n\nplt.show()\n\n\n\n\n\n\n\n\n\nnetlogo.kill_workspace()"
  },
  {
    "objectID": "index.html#example-2",
    "href": "index.html#example-2",
    "title": "pynetlogo",
    "section": "Example 2",
    "text": "Example 2\n\n\n\n\n\n\nSee the this example at: https://pynetlogo.readthedocs.io/en/latest/_docs/SALib_ipyparallel.html\n\n\n\n\n\n\n\n\n\nI encountered an error running the code below and was unable to complete execution.\nThe error is indicated within the pipeline.\n\n\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style(\"white\")\nsns.set_context(\"talk\")\n\nimport pynetlogo\n\n# Import the sampling and analysis modules for a Sobol variance-based\n# sensitivity analysis\nfrom SALib.sample import sobol as sobolsample\nfrom SALib.analyze import sobol\n\n\nproblem = {\n    \"num_vars\": 6,\n    \"names\": [\n        \"random-seed\",\n        \"grass-regrowth-time\",\n        \"sheep-gain-from-food\",\n        \"wolf-gain-from-food\",\n        \"sheep-reproduce\",\n        \"wolf-reproduce\",\n    ],\n    \"bounds\": [\n        [1, 100000],\n        [20.0, 40.0],\n        [2.0, 8.0],\n        [16.0, 32.0],\n        [2.0, 8.0],\n        [2.0, 8.0],\n    ],\n}\n\n\nn = 1024\nparam_values = sobolsample.sample(problem, n, calc_second_order=True)\n\n\nparam_values.shape\n\n(14336, 6)\n\n\n\nRunning the Experiments in Parallel Using ipyparallel\n\nimport ipyparallel as ipp\n\ncluster = ipp.Cluster(n=4)\ncluster.start_cluster_sync();\n\n\nrc = cluster.connect_client_sync()\nrc.ids\n\n\ndirect_view = rc[:]\n\n\nimport os\n\n# Push the current working directory of the notebook to a \"cwd\" variable on the engines that can be accessed later\ndirect_view.push(dict(cwd=os.getcwd()), block=True)\n\n\n# Push the \"problem\" variable from the notebook to a corresponding variable on the engines\ndirect_view.push(dict(problem=problem), block=True)\n\n\n%%px\nimport os\nos.chdir(cwd)\n\nimport pynetlogo\nimport pandas as pd\n\nnetlogo = pynetlogo.NetLogoLink(\n    gui = False,\n    thd = False,\n    netlogo_home = \"/opt/netlogo-7-0-0\"\n)\n\nnetlogo.load_model(\"./nlogox/Wolf Sheep Predation_v6.nlogox\")\n\n\ndef simulation(experiment):\n\n    # Set the input parameters\n    for i, name in enumerate(problem[\"names\"]):\n        if name == \"random-seed\":\n            # The NetLogo random seed requires a different syntax\n            netlogo.command(\"random-seed {}\".format(experiment[i]))\n        else:\n            # Otherwise, assume the input parameters are global variables\n            netlogo.command(\"set {0} {1}\".format(name, experiment[i]))\n\n    netlogo.command(\"setup\")\n    # Run for 100 ticks and return the number of sheep and wolf agents at each time step\n    counts = netlogo.repeat_report([\"count sheep\", \"count wolves\"], 100)\n\n    results = pd.Series(\n        [counts[\"count sheep\"].values.mean(), counts[\"count wolves\"].values.mean()],\n        index=[\"Avg. sheep\", \"Avg. wolves\"],\n    )\n\n    return results\n\n\n\n\n\n\n\nI encountered an error running the code below and was unable to complete execution.\nThe remaining code cells in this section (Example 2) will not be evaluated due to this issue.\nCompositeError: one or more exceptions raised in: simulation\n[3:apply]AttributeError: 'numpy.ndarray' object has no attribute 'values'\n[1:apply]AttributeError: 'numpy.ndarray' object has no attribute 'values'\n[0:apply]AttributeError: 'numpy.ndarray' object has no attribute 'values'\n[2:apply]AttributeError: 'numpy.ndarray' object has no attribute 'values'\n.... 14332 more exceptions ...\n\n\n\n\nlview = rc.load_balanced_view()\n\nresults = pd.DataFrame(lview.map_sync(simulation, param_values))\n\n\nresults.to_csv(\"./data/Sobol_parallel.csv\")\n\n\nresults.head(5)\n\n\n\nUsing SALib for Sensitivity Analysis\n\nfig, ax = plt.subplots(1, len(results.columns), sharey=True)\n\nfor i, n in enumerate(results.columns):\n    ax[i].hist(results[n], 20)\n    ax[i].set_xlabel(n)\nax[0].set_ylabel(\"Counts\")\n\nfig.set_size_inches(10, 4)\nfig.subplots_adjust(wspace=0.1)\n\nplt.show()\n\n\nimport scipy\n\nnrow = 2\nncol = 3\n\nfig, ax = plt.subplots(nrow, ncol, sharey=True)\n\ny = results[\"Avg. sheep\"]\n\nfor i, a in enumerate(ax.flatten()):\n    x = param_values[:, i]\n    sns.regplot(\n        x=x,\n        y=y,\n        ax=a,\n        ci=None,\n        color=\"k\",\n        scatter_kws={\"alpha\": 0.2, \"s\": 4, \"color\": \"gray\"},\n    )\n    pearson = scipy.stats.pearsonr(x, y)\n    a.annotate(\n        \"r: {:6.3f}\".format(pearson[0]),\n        xy=(0.15, 0.85),\n        xycoords=\"axes fraction\",\n        fontsize=13,\n    )\n    if divmod(i, ncol)[1] &gt; 0:\n        a.get_yaxis().set_visible(False)\n    a.set_xlabel(problem[\"names\"][i])\n    a.set_ylim([0, 1.1 * np.max(y)])\n\nfig.set_size_inches(9, 9, forward=True)\nfig.subplots_adjust(wspace=0.2, hspace=0.3)\n\nplt.show()\n\n\nSi = sobol.analyze(\n    problem,\n    results[\"Avg. sheep\"].values,\n    calc_second_order=True,\n    print_to_console=False,\n)\n\n\nSi_filter = {k: Si[k] for k in [\"ST\", \"ST_conf\", \"S1\", \"S1_conf\"]}\nSi_df = pd.DataFrame(Si_filter, index=problem[\"names\"])\n\n\nSi_df\n\n\nfig, ax = plt.subplots(1)\n\nindices = Si_df[[\"S1\", \"ST\"]]\nerr = Si_df[[\"S1_conf\", \"ST_conf\"]]\n\nindices.plot.bar(yerr=err.values.T, ax=ax)\nfig.set_size_inches(8, 4)\n\nplt.show()\n\n\n%matplotlib inline\nimport itertools\nfrom math import pi\nfrom matplotlib.legend_handler import HandlerPatch\n\n\ndef normalize(x, xmin, xmax):\n    return (x - xmin) / (xmax - xmin)\n\n\ndef plot_circles(ax, locs, names, max_s, stats, smax, smin, fc, ec, lw, zorder):\n    s = np.asarray([stats[name] for name in names])\n    s = 0.01 + max_s * np.sqrt(normalize(s, smin, smax))\n\n    fill = True\n    for loc, name, si in zip(locs, names, s):\n        if fc == \"w\":\n            fill = False\n        else:\n            ec = \"none\"\n\n        x = np.cos(loc)\n        y = np.sin(loc)\n\n        circle = plt.Circle(\n            (x, y),\n            radius=si,\n            ec=ec,\n            fc=fc,\n            transform=ax.transData._b,\n            zorder=zorder,\n            lw=lw,\n            fill=True,\n        )\n        ax.add_artist(circle)\n\n\ndef filter(sobol_indices, names, locs, criterion, threshold):\n    if criterion in [\"ST\", \"S1\", \"S2\"]:\n        data = sobol_indices[criterion]\n        data = np.abs(data)\n        data = data.flatten()  # flatten in case of S2\n        # TODO:: remove nans\n\n        filtered = [(name, locs[i]) for i, name in enumerate(names) if data[i] &gt; threshold]\n        filtered_names, filtered_locs = zip(*filtered)\n    elif criterion in [\"ST_conf\", \"S1_conf\", \"S2_conf\"]:\n        raise NotImplementedError\n    else:\n        raise ValueError(\"unknown value for criterion\")\n\n    return filtered_names, filtered_locs\n\n\ndef plot_sobol_indices(sobol_indices, criterion=\"ST\", threshold=0.01):\n    \"\"\"plot sobol indices on a radial plot\n\n    Parameters\n    ----------\n    sobol_indices : dict\n                    the return from SAlib\n    criterion : {'ST', 'S1', 'S2', 'ST_conf', 'S1_conf', 'S2_conf'}, optional\n    threshold : float\n                only visualize variables with criterion larger than cutoff\n\n    \"\"\"\n    max_linewidth_s2 = 15  # 25*1.8\n    max_s_radius = 0.3\n\n    # prepare data\n    # use the absolute values of all the indices\n    # sobol_indices = {key:np.abs(stats) for key, stats in sobol_indices.items()}\n\n    # dataframe with ST and S1\n    sobol_stats = {key: sobol_indices[key] for key in [\"ST\", \"S1\"]}\n    sobol_stats = pd.DataFrame(sobol_stats, index=problem[\"names\"])\n\n    smax = sobol_stats.max().max()\n    smin = sobol_stats.min().min()\n\n    # dataframe with s2\n    s2 = pd.DataFrame(sobol_indices[\"S2\"], index=problem[\"names\"], columns=problem[\"names\"])\n    s2[s2 &lt; 0.0] = 0.0  # Set negative values to 0 (artifact from small sample sizes)\n    s2max = s2.max().max()\n    s2min = s2.min().min()\n\n    names = problem[\"names\"]\n    n = len(names)\n    ticklocs = np.linspace(0, 2 * pi, n + 1)\n    locs = ticklocs[0:-1]\n\n    filtered_names, filtered_locs = filter(sobol_indices, names, locs, criterion, threshold)\n\n    # setup figure\n    fig = plt.figure()\n    ax = fig.add_subplot(111, polar=True)\n    ax.grid(False)\n    ax.spines[\"polar\"].set_visible(False)\n\n    ax.set_xticks(locs)\n    ax.set_xticklabels(names)\n\n    ax.set_yticklabels([])\n    ax.set_ylim(top=1.4)\n    legend(ax)\n\n    # plot ST\n    plot_circles(\n        ax,\n        filtered_locs,\n        filtered_names,\n        max_s_radius,\n        sobol_stats[\"ST\"],\n        smax,\n        smin,\n        \"w\",\n        \"k\",\n        1,\n        9,\n    )\n\n    # plot S1\n    plot_circles(\n        ax,\n        filtered_locs,\n        filtered_names,\n        max_s_radius,\n        sobol_stats[\"S1\"],\n        smax,\n        smin,\n        \"k\",\n        \"k\",\n        1,\n        10,\n    )\n\n    # plot S2\n    for name1, name2 in itertools.combinations(zip(filtered_names, filtered_locs), 2):\n        name1, loc1 = name1\n        name2, loc2 = name2\n\n        weight = s2.loc[name1, name2]\n        lw = 0.5 + max_linewidth_s2 * normalize(weight, s2min, s2max)\n        ax.plot([loc1, loc2], [1, 1], c=\"darkgray\", lw=lw, zorder=1)\n\n    return fig\n\n\nclass HandlerCircle(HandlerPatch):\n    def create_artists(\n        self, legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans\n    ):\n        center = 0.5 * width - 0.5 * xdescent, 0.5 * height - 0.5 * ydescent\n        p = plt.Circle(xy=center, radius=orig_handle.radius)\n        self.update_prop(p, orig_handle, legend)\n        p.set_transform(trans)\n        return [p]\n\n\ndef legend(ax):\n    some_identifiers = [\n        plt.Circle((0, 0), radius=5, color=\"k\", fill=False, lw=1),\n        plt.Circle((0, 0), radius=5, color=\"k\", fill=True),\n        plt.Line2D([0, 0.5], [0, 0.5], lw=8, color=\"darkgray\"),\n    ]\n    ax.legend(\n        some_identifiers,\n        [\"ST\", \"S1\", \"S2\"],\n        loc=(1, 0.75),\n        borderaxespad=0.1,\n        mode=\"expand\",\n        handler_map={plt.Circle: HandlerCircle()},\n    )\n\n\nsns.set_style(\"whitegrid\")\nfig = plot_sobol_indices(Si, criterion=\"ST\", threshold=0.005)\nfig.set_size_inches(7, 7)\nplt.show()"
  },
  {
    "objectID": "index.html#example-3",
    "href": "index.html#example-3",
    "title": "pynetlogo",
    "section": "Example 3",
    "text": "Example 3\n\n\n\n\n\n\nSee the this example at: https://pynetlogo.readthedocs.io/en/latest/_docs/SALib_multiprocessing.html\n\n\n\n\n\n\n\n\n\nI encountered an error running the code below and was unable to complete execution.\nThe error is indicated within the pipeline.\n\n\n\n\nRunning the Experiments in Parallel Using a Process Pool\n\nfrom multiprocessing import Pool\nimport os\nimport pandas as pd\n\nimport pynetlogo\n\nfrom SALib.sample import sobol as sobolsample\n\n\ndef initializer(modelfile):\n    \"\"\"initialize a subprocess\n\n    Parameters\n    ----------\n    modelfile : str\n\n    \"\"\"\n\n    # we need to set the instantiated netlogo\n    # link as a global so run_simulation can\n    # use it\n    global netlogo\n\n    netlogo = pynetlogo.NetLogoLink(\n      gui = False,\n      thd = False,\n      netlogo_home = \"/opt/netlogo-7-0-0\"\n    )\n\n    netlogo.load_model(modelfile)\n\n\ndef run_simulation(experiment):\n    \"\"\"run a netlogo model\n\n    Parameters\n    ----------\n    experiments : dict\n\n    \"\"\"\n\n    # Set the input parameters\n    for key, value in experiment.items():\n        if key == \"random-seed\":\n            # The NetLogo random seed requires a different syntax\n            netlogo.command(\"random-seed {}\".format(value))\n        else:\n            # Otherwise, assume the input parameters are global variables\n            netlogo.command(\"set {0} {1}\".format(key, value))\n\n    netlogo.command(\"setup\")\n    # Run for 100 ticks and return the number of sheep and\n    # wolf agents at each time step\n    counts = netlogo.repeat_report([\"count sheep\", \"count wolves\"], 100)\n\n    results = pd.Series(\n        [counts[\"count sheep\"].values.mean(), counts[\"count wolves\"].values.mean()],\n        index=[\"Avg. sheep\", \"Avg. wolves\"],\n    )\n    return results\n\n\n\n\n\n\n\nI encountered an error running the code below and was unable to complete execution.\nThe remaining code cells in this section (Example 3) will not be evaluated due to this issue.\njava.lang.ClassNotFoundException: org.nlogo.sdm.NLogoThreeDSDMFormat\n    at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:580)\n    at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:490)\n    at java.base/java.lang.Class.forName0(Native Method)\n    at java.base/java.lang.Class.forName(Class.java:467)\n    at java.base/java.lang.Class.forName(Class.java:458)\n    at org.nlogo.core.Femto$.get(Femto.scala:10)\n    at org.nlogo.headless.HeadlessWorkspace.loader$lzyINIT1(HeadlessWorkspace.scala:504)\n    at org.nlogo.headless.HeadlessWorkspace.loader(HeadlessWorkspace.scala:499)\n    at org.nlogo.headless.HeadlessWorkspace.open(HeadlessWorkspace.scala:529)\n    at org.nlogo.headless.HeadlessWorkspace.open(HeadlessWorkspace.scala:517)\n    at netLogoLink.NetLogoLink.loadModel(NetLogoLink.java:132)\n\nProcess ForkPoolWorker-284:\nTraceback (most recent call last):\n  File \"NetLogoLink.java\", line 132, in netLogoLink.NetLogoLink.loadModel\nException: Java Exception\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\njava.lang.NoClassDefFoundError: org/nlogo/api/FormatterPair\n    at org.nlogo.api.ConfigurableModelLoader.addFormat(ModelLoader.scala:155)\n    at org.nlogo.fileformat.FileFormat$.standardLoader(FileFormat.scala:50)\n    at org.nlogo.fileformat.FileFormat$.standardAnyLoader(FileFormat.scala:65)\n    at org.nlogo.headless.HeadlessWorkspace.loader$lzyINIT1(HeadlessWorkspace.scala:500)\n    at org.nlogo.headless.HeadlessWorkspace.loader(HeadlessWorkspace.scala:499)\n    at org.nlogo.headless.HeadlessWorkspace.open(HeadlessWorkspace.scala:529)\n    at org.nlogo.headless.HeadlessWorkspace.open(HeadlessWorkspace.scala:517)\n    at netLogoLink.NetLogoLink.loadModel(NetLogoLink.java:132)\nCaused by: java.lang.ClassNotFoundException: org.nlogo.api.FormatterPair\n    at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:580)\n    at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:490)\n    ... 8 more\n  File \"/home/danielvartan/Git/pynetlogo/.venv/lib/python3.13/site-packages/pynetlogo/core.py\", line 246, in load_model\n    self.link.loadModel(path)\n    ~~~~~~~~~~~~~~~~~~~^^^^^^\n\njava.lang.java.lang.ClassNotFoundException: java.lang.ClassNotFoundException: org.nlogo.sdm.NLogoThreeDSDMFormat\n\nDuring handling of the above exception, another exception occurred:\n\nProcess ForkPoolWorker-283:\nTraceback (most recent call last):\n  File \"/usr/lib/python3.13/multiprocessing/process.py\", line 313, in _bootstrap\n    self.run()\n    ~~~~~~~~^^\n  File \"/usr/lib/python3.13/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTraceback (most recent call last):\n  File \"/usr/lib/python3.13/multiprocessing/pool.py\", line 109, in worker\n    initializer(*initargs)\n    ~~~~~~~~~~~^^^^^^^^^^^\n  File \"ClassLoader.java\", line 490, in java.lang.ClassLoader.loadClass\n  File \"/tmp/ipykernel_4583/225911425.py\", line 21, in initializer\n    netlogo.load_model(modelfile)\n    ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^\njava.lang.java.lang.ClassNotFoundException: java.lang.ClassNotFoundException: org.nlogo.api.FormatterPair\n  File \"/home/danielvartan/Git/pynetlogo/.venv/lib/python3.13/site-packages/pynetlogo/core.py\", line 249, in load_model\n    raise NetLogoException(str(ex))\npynetlogo.core.NetLogoException: java.lang.ClassNotFoundException: org.nlogo.sdm.NLogoThreeDSDMFormat\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"NetLogoLink.java\", line 132, in netLogoLink.NetLogoLink.loadModel\nException: Java Exception\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/danielvartan/Git/pynetlogo/.venv/lib/python3.13/site-packages/pynetlogo/core.py\", line 246, in load_model\n    self.link.loadModel(path)\n    ~~~~~~~~~~~~~~~~~~~^^^^^^\njava.lang.java.lang.NoClassDefFoundError: java.lang.NoClassDefFoundError: org/nlogo/api/FormatterPair\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/lib/python3.13/multiprocessing/process.py\", line 313, in _bootstrap\n    self.run()\n    ~~~~~~~~^^\n  File \"/usr/lib/python3.13/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.13/multiprocessing/pool.py\", line 109, in worker\n    initializer(*initargs)\n    ~~~~~~~~~~~^^^^^^^^^^^\n  File \"/tmp/ipykernel_4583/225911425.py\", line 21, in initializer\n    netlogo.load_model(modelfile)\n    ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^\n  File \"/home/danielvartan/Git/pynetlogo/.venv/lib/python3.13/site-packages/pynetlogo/core.py\", line 249, in load_model\n    raise NetLogoException(str(ex))\npynetlogo.core.NetLogoException: java.lang.NoClassDefFoundError: org/nlogo/api/FormatterPair\njava.lang.NoClassDefFoundError: org/nlogo/fileformat/AbstractNLogoFormat$CodeComponent$\n    at org.nlogo.fileformat.NLogoFormat.CodeComponent$lzyINIT1(NLogoFormat.scala:19)\n    at org.nlogo.fileformat.NLogoFormat.CodeComponent(NLogoFormat.scala:19)\n    at org.nlogo.fileformat.AbstractNLogoFormat.codeComponent(NLogoFormat.scala:261)\n    at org.nlogo.fileformat.AbstractNLogoFormat.codeComponent$(NLogoFormat.scala:47)\n    at org.nlogo.fileformat.NLogoFormat.codeComponent(NLogoFormat.scala:17)\n    at org.nlogo.api.ModelFormat.defaultComponents(ModelFormat.scala:41)\n    at org.nlogo.api.ModelFormat.defaultComponents$(ModelFormat.scala:20)\n    at org.nlogo.fileformat.NLogoFormat.defaultComponents(NLogoFormat.scala:17)\n    at org.nlogo.api.ModelFormat.load$$anonfun$2(ModelFormat.scala:58)\n    at scala.util.Success.flatMap(Try.scala:266)\n    at org.nlogo.api.ModelFormat.load(ModelFormat.scala:57)\n    at org.nlogo.api.ModelFormat.load$(ModelFormat.scala:20)\n    at org.nlogo.fileformat.NLogoFormat.load(NLogoFormat.scala:17)\n    at org.nlogo.api.FormatterPair.load(ModelLoader.scala:55)\n    at org.nlogo.api.ModelLoader.readModel(ModelLoader.scala:91)\n    at org.nlogo.api.ModelLoader.readModel$(ModelLoader.scala:77)\n    at org.nlogo.api.ConfigurableModelLoader.readModel(ModelLoader.scala:151)\n    at org.nlogo.fileformat.NLogoAnyLoader.readModel$$anonfun$2(NLogoAnyLoader.scala:29)\n    at scala.Option.map(Option.scala:242)\n    at org.nlogo.fileformat.NLogoAnyLoader.bruteForce(NLogoAnyLoader.scala:24)\n    at org.nlogo.fileformat.NLogoAnyLoader.readModel(NLogoAnyLoader.scala:29)\n    at org.nlogo.headless.HeadlessWorkspace.open(HeadlessWorkspace.scala:529)\n    at org.nlogo.headless.HeadlessWorkspace.open(HeadlessWorkspace.scala:517)\n    at netLogoLink.NetLogoLink.loadModel(NetLogoLink.java:132)\nCaused by: java.lang.ClassNotFoundException: org.nlogo.fileformat.AbstractNLogoFormat$CodeComponent$\n    at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:580)\n    at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:490)\n    ... 24 more\n\nProcess ForkPoolWorker-285:\njava.lang.NoClassDefFoundError: org/nlogo/core/Switch$\n    at org.nlogo.core.model.SwitchReader$.asWidget(WidgetReader.scala:416)\n    at org.nlogo.core.model.SwitchReader$.asWidget(WidgetReader.scala:412)\n    at org.nlogo.core.model.BaseWidgetReader.parse(WidgetReader.scala:182)\n    at org.nlogo.core.model.WidgetReader$.read(WidgetReader.scala:125)\n    at org.nlogo.fileformat.AbstractNLogoFormat$InterfaceComponent$.$anonfun$5(NLogoFormat.scala:226)\n    at scala.collection.immutable.List.map(List.scala:251)\n    at org.nlogo.fileformat.AbstractNLogoFormat$InterfaceComponent$.deserialize$$anonfun$4$$anonfun$1(NLogoFormat.scala:226)\n    at scala.util.Try$.apply(Try.scala:217)\n    at org.nlogo.fileformat.AbstractNLogoFormat$InterfaceComponent$.deserialize$$anonfun$4(NLogoFormat.scala:227)\n    at scala.util.Success.flatMap(Try.scala:266)\n    at org.nlogo.api.ModelFormat.addModelSection(ModelFormat.scala:91)\n    at org.nlogo.api.ModelFormat.constructModel$$anonfun$2(ModelFormat.scala:63)\n    at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)\n    at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)\n    at scala.collection.immutable.List.foldLeft(List.scala:79)\n    at org.nlogo.api.ModelFormat.constructModel(ModelFormat.scala:63)\n    at org.nlogo.api.ModelFormat.constructModel$(ModelFormat.scala:20)\n    at org.nlogo.fileformat.NLogoFormat.constructModel(NLogoFormat.scala:17)\n    at org.nlogo.api.ModelFormat.load$$anonfun$2(ModelFormat.scala:58)\n    at scala.util.Success.flatMap(Try.scala:266)\n    at org.nlogo.api.ModelFormat.load(ModelFormat.scala:57)\n    at org.nlogo.api.ModelFormat.load$(ModelFormat.scala:20)\n    at org.nlogo.fileformat.NLogoFormat.load(NLogoFormat.scala:17)\n    at org.nlogo.api.FormatterPair.load(ModelLoader.scala:55)\n    at org.nlogo.api.ModelLoader.readModel(ModelLoader.scala:91)\n    at org.nlogo.api.ModelLoader.readModel$(ModelLoader.scala:77)\n    at org.nlogo.api.ConfigurableModelLoader.readModel(ModelLoader.scala:151)\n    at org.nlogo.fileformat.NLogoAnyLoader.readModel$$anonfun$2(NLogoAnyLoader.scala:29)\n    at scala.Option.map(Option.scala:242)\n    at org.nlogo.fileformat.NLogoAnyLoader.bruteForce(NLogoAnyLoader.scala:24)\n    at org.nlogo.fileformat.NLogoAnyLoader.readModel(NLogoAnyLoader.scala:29)\n    at org.nlogo.headless.HeadlessWorkspace.open(HeadlessWorkspace.scala:529)\n    at org.nlogo.headless.HeadlessWorkspace.open(HeadlessWorkspace.scala:517)\n    at netLogoLink.NetLogoLink.loadModel(NetLogoLink.java:132)\nCaused by: java.lang.ClassNotFoundException: org.nlogo.core.Switch$\n    at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:580)\n    at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:490)\n    ... 34 more\n\nTraceback (most recent call last):\nProcess ForkPoolWorker-281:\n  File \"ClassLoader.java\", line 490, in java.lang.ClassLoader.loadClass\njava.lang.java.lang.ClassNotFoundException: java.lang.ClassNotFoundException: org.nlogo.fileformat.AbstractNLogoFormat$CodeComponent$\nTraceback (most recent call last):\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"ClassLoader.java\", line 490, in java.lang.ClassLoader.loadClass\njava.lang.java.lang.ClassNotFoundException: java.lang.ClassNotFoundException: org.nlogo.core.Switch$\n  File \"NetLogoLink.java\", line 132, in netLogoLink.NetLogoLink.loadModel\nException: Java Exception\n\nThe above exception was the direct cause of the following exception:\n\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\nTraceback (most recent call last):\n  File \"NetLogoLink.java\", line 132, in netLogoLink.NetLogoLink.loadModel\n  File \"/home/danielvartan/Git/pynetlogo/.venv/lib/python3.13/site-packages/pynetlogo/core.py\", line 246, in load_model\n    self.link.loadModel(path)\n    ~~~~~~~~~~~~~~~~~~~^^^^^^\nException: Java Exception\njava.lang.java.lang.NoClassDefFoundError: java.lang.NoClassDefFoundError: org/nlogo/fileformat/AbstractNLogoFormat$CodeComponent$\n\nThe above exception was the direct cause of the following exception:\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\nTraceback (most recent call last):\n  File \"/home/danielvartan/Git/pynetlogo/.venv/lib/python3.13/site-packages/pynetlogo/core.py\", line 246, in load_model\n    self.link.loadModel(path)\n    ~~~~~~~~~~~~~~~~~~~^^^^^^\n  File \"/usr/lib/python3.13/multiprocessing/process.py\", line 313, in _bootstrap\n    self.run()\n    ~~~~~~~~^^\njava.lang.java.lang.NoClassDefFoundError: java.lang.NoClassDefFoundError: org/nlogo/core/Switch$\n  File \"/usr/lib/python3.13/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDuring handling of the above exception, another exception occurred:\n\n  File \"/usr/lib/python3.13/multiprocessing/pool.py\", line 109, in worker\n    initializer(*initargs)\n    ~~~~~~~~~~~^^^^^^^^^^^\n  File \"/tmp/ipykernel_4583/225911425.py\", line 21, in initializer\n    netlogo.load_model(modelfile)\n    ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^\nTraceback (most recent call last):\n  File \"/home/danielvartan/Git/pynetlogo/.venv/lib/python3.13/site-packages/pynetlogo/core.py\", line 249, in load_model\n    raise NetLogoException(str(ex))\n  File \"/usr/lib/python3.13/multiprocessing/process.py\", line 313, in _bootstrap\n    self.run()\n    ~~~~~~~~^^\npynetlogo.core.NetLogoException: java.lang.NoClassDefFoundError: org/nlogo/fileformat/AbstractNLogoFormat$CodeComponent$\n  File \"/usr/lib/python3.13/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.13/multiprocessing/pool.py\", line 109, in worker\n    initializer(*initargs)\n    ~~~~~~~~~~~^^^^^^^^^^^\n  File \"/tmp/ipykernel_4583/225911425.py\", line 21, in initializer\n    netlogo.load_model(modelfile)\n    ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^\n  File \"/home/danielvartan/Git/pynetlogo/.venv/lib/python3.13/site-packages/pynetlogo/core.py\", line 249, in load_model\n    raise NetLogoException(str(ex))\npynetlogo.core.NetLogoException: java.lang.NoClassDefFoundError: org/nlogo/core/Switch$\n\n\n\n\nif __name__ == \"__main__\":\n    modelfile = os.path.abspath(\"./nlogox/Wolf Sheep Predation_v6.nlogox\")\n\n    problem = {\n        \"num_vars\": 6,\n        \"names\": [\n            \"random-seed\",\n            \"grass-regrowth-time\",\n            \"sheep-gain-from-food\",\n            \"wolf-gain-from-food\",\n            \"sheep-reproduce\",\n            \"wolf-reproduce\",\n        ],\n        \"bounds\": [[1, 100000], [20.0, 40.0], [2.0, 8.0], [16.0, 32.0], [2.0, 8.0], [2.0, 8.0]],\n    }\n\n    n = 1024\n    param_values = sobolsample.sample(problem, n, calc_second_order=True)\n\n    # cast the param_values to a dataframe to\n    # include the column labels\n    experiments = pd.DataFrame(param_values, columns=problem[\"names\"])\n\n    with Pool(4, initializer=initializer, initargs=(modelfile,)) as executor:\n        results = []\n        for entry in executor.map(run_simulation, experiments.to_dict(\"records\")):\n            results.append(entry)\n        results = pd.DataFrame(results)"
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "pynetlogo",
    "section": "License",
    "text": "License\n\nThis content is licensed under CC0 1.0 Universal, placing these materials in the public domain. You may freely copy, modify, distribute, and use this work, even for commercial purposes, without permission or attribution."
  }
]