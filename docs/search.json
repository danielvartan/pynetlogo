[
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "pynetlogo",
    "section": "Overview",
    "text": "Overview\nThis document reproduces the examples of the pynetlogo Python package, which provides an interface to control NetLogo from Python. These examples are available in the package documentation."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "pynetlogo",
    "section": "Installation",
    "text": "Installation\nInstall pynetlogo and other dependencies in a virtual environment:\npython -m venv .venv\nsource .venv/bin/activate\npip install pynetlogo\n\npip install ipyparallel\npip install multiprocessing\npip install nbclient\npip install nbformat\npip install openpyxl\npip install pyyaml\npip install SALib\npip install session_info\npip install sobol\nYou will also need to ensure that the path to Java Virtual Machine (JVM) is properly configured in the JAVA_HOME environment variable. You can set this variable in your shell configuration file (e.g., .bashrc):\nFor Arch Linux, use:\nexport JAVA_HOME=\"/usr/lib/jvm/default\""
  },
  {
    "objectID": "index.html#example-1",
    "href": "index.html#example-1",
    "title": "pynetlogo",
    "section": "Example 1",
    "text": "Example 1\n\n\n\n\n\n\nSee the this example at: https://pynetlogo.readthedocs.io/en/latest/_docs/introduction.html\n\n\n\n\n%matplotlib inline\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nsns.set_style(\"white\")\nsns.set_context(\"talk\")\n\n\nimport pynetlogo\n\nnetlogo = pynetlogo.NetLogoLink(\n    gui = True,\n    thd = False,\n    netlogo_home = \"/opt/netlogo-7-0-0\"\n)\n\nWARNING: A restricted method in java.lang.System has been called\nWARNING: java.lang.System::load has been called by org.jpype.JPypeContext in an unnamed module (file:/home/danielvartan/Git/pynetlogo/.venv/lib/python3.13/site-packages/org.jpype.jar)\nWARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for callers in this module\nWARNING: Restricted methods will be blocked in a future release unless native access is enabled\n\nWARNING: A terminally deprecated method in sun.misc.Unsafe has been called\nWARNING: sun.misc.Unsafe::objectFieldOffset has been called by scala.runtime.LazyVals$ (file:/opt/netlogo-7-0-0/lib/app/scala3-library_3-3.7.0.jar)\nWARNING: Please consider reporting this to the maintainers of class scala.runtime.LazyVals$\nWARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release\nSLF4J(W): No SLF4J providers were found.\nSLF4J(W): Defaulting to no-operation (NOP) logger implementation\nSLF4J(W): See https://www.slf4j.org/codes.html#noProviders for further details.\nSep 27, 2025 12:22:06 AM com.sun.javafx.application.PlatformImpl startup\nWARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @5d5d9e5'\n\n\n\nnetlogo.load_model(\"./nlogox/Wolf Sheep Predation_v6.nlogox\")\nnetlogo.command(\"setup\")\n\n\nagent_xy = pd.read_excel(\"./data/xy_DataFrame.xlsx\")\nagent_xy[[\"who\", \"xcor\", \"ycor\"]].head(5)\n\n\n\n\n\n\n\n\nwho\nxcor\nycor\n\n\n\n\n0\n0\n-24.000000\n-24.000000\n\n\n1\n1\n-23.666667\n-23.666667\n\n\n2\n2\n-23.333333\n-23.333333\n\n\n3\n3\n-23.000000\n-23.000000\n\n\n4\n4\n-22.666667\n-22.666667\n\n\n\n\n\n\n\n\nnetlogo.write_NetLogo_attriblist(agent_xy[[\"who\", \"xcor\", \"ycor\"]], \"a-sheep\")\n\n\nx = netlogo.report(\"map [s -&gt; [xcor] of s] sort sheep\")\ny = netlogo.report(\"map [s -&gt; [ycor] of s] sort sheep\")\n\n\nfig, ax = plt.subplots(1)\n\nax.scatter(x, y, s=4)\nax.set_xlabel(\"xcor\")\nax.set_ylabel(\"ycor\")\nax.set_aspect(\"equal\")\nfig.set_size_inches(5, 5)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n# We can use either of the following commands to run for 100 ticks:\n\nnetlogo.command(\"repeat 100 [go]\")\n# netlogo.repeat_command('go', 100)\n\n\n# Return sorted arrays so that the x, y and energy properties of each agent are in the same order\nx = netlogo.report(\"map [s -&gt; [xcor] of s] sort sheep\")\ny = netlogo.report(\"map [s -&gt; [ycor] of s] sort sheep\")\nenergy_sheep = netlogo.report(\"map [s -&gt; [energy] of s] sort sheep\")\n\nenergy_wolves = netlogo.report(\"[energy] of wolves\")  # NetLogo returns these in random order\n\n\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\nfig, ax = plt.subplots(1, 2)\n\nsc = ax[0].scatter(x, y, s=50, c=energy_sheep, cmap=plt.cm.coolwarm)\nax[0].set_xlabel(\"xcor\")\nax[0].set_ylabel(\"ycor\")\nax[0].set_aspect(\"equal\")\ndivider = make_axes_locatable(ax[0])\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\ncbar = plt.colorbar(sc, cax=cax, orientation=\"vertical\")\ncbar.set_label(\"Energy of sheep\")\n\nsns.histplot(energy_sheep, kde=False, bins=10, ax=ax[1], label=\"Sheep\")\nsns.histplot(energy_wolves, kde=False, bins=10, ax=ax[1], label=\"Wolves\")\nax[1].set_xlabel(\"Energy\")\nax[1].set_ylabel(\"Counts\")\nax[1].legend()\nfig.set_size_inches(14, 5)\n\nplt.show()\n\n\n\n\n\n\n\n\n\ncounts = netlogo.repeat_report([\"count wolves\", \"count sheep\"], 200, go=\"go\")\n\n\ncounts = pd.DataFrame(counts)\n\n\nfig, (ax1, ax2) = plt.subplots(1, 2)\n\ncounts.plot(ax=ax1, use_index=True, legend=True)\nax1.set_xlabel(\"Ticks\")\nax1.set_ylabel(\"Counts\")\n\nax2.plot(counts[\"count wolves\"], counts[\"count sheep\"])\nax2.set_xlabel(\"Wolves\")\nax2.set_ylabel(\"Sheep\")\n\n\nfor ax in [ax1, ax2]:\n    ax.set_aspect(1 / ax.get_data_ratio())\n\n\nfig.set_size_inches(12, 5)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nresults = netlogo.repeat_report(\n    [\n        \"[energy] of wolves\",\n        \"[energy] of sheep\",\n        \"[sheep_str] of sheep\",\n        \"count sheep\",\n        \"glob_str\",\n    ],\n    5,\n)\n\nfig, ax = plt.subplots(1)\n\nsns.histplot(results[\"[energy] of wolves\"][-1], kde=False, bins=20, ax=ax)\nax.set_xlabel(\"Energy\")\nax.set_ylabel(\"Counts\")\nfig.set_size_inches(4, 4)\n\nplt.show()\n\n\n\n\n\n\n\n\n\nlist(results.keys())\n\n['[energy] of wolves',\n '[energy] of sheep',\n '[sheep_str] of sheep',\n 'count sheep',\n 'glob_str']\n\n\n\ncountdown_df = netlogo.patch_report(\"countdown\")\n\nfig, ax = plt.subplots(1)\n\npatches = sns.heatmap(\n    countdown_df, xticklabels=5, yticklabels=5, cbar_kws={\"label\": \"countdown\"}, ax=ax\n)\nax.set_xlabel(\"pxcor\")\nax.set_ylabel(\"pycor\")\nax.set_aspect(\"equal\")\nfig.set_size_inches(8, 4)\n\nplt.show()\n\n\n\n\n\n\n\n\n\ncountdown_df.to_excel(\"countdown.xlsx\")\nnetlogo.patch_set(\"countdown\", countdown_df.max() - countdown_df)\n\n\ncountdown_update_df = netlogo.patch_report(\"countdown\")\n\nfig, ax = plt.subplots(1)\n\npatches = sns.heatmap(\n    countdown_update_df,\n    xticklabels=5,\n    yticklabels=5,\n    cbar_kws={\"label\": \"countdown\"},\n    ax=ax,\n)\nax.set_xlabel(\"pxcor\")\nax.set_ylabel(\"pycor\")\nax.set_aspect(\"equal\")\nfig.set_size_inches(8, 4)\n\nplt.show()\n\n\n\n\n\n\n\n\n\nnetlogo.kill_workspace()"
  },
  {
    "objectID": "index.html#example-2",
    "href": "index.html#example-2",
    "title": "pynetlogo",
    "section": "Example 2",
    "text": "Example 2\n\n\n\n\n\n\nSee the this example at: https://pynetlogo.readthedocs.io/en/latest/_docs/SALib_ipyparallel.html\n\n\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style(\"white\")\nsns.set_context(\"talk\")\n\nimport pynetlogo\n\n# Import the sampling and analysis modules for a Sobol variance-based\n# sensitivity analysis\nfrom SALib.sample import sobol as sobolsample\nfrom SALib.analyze import sobol\n\n\nproblem = {\n    \"num_vars\": 6,\n    \"names\": [\n        \"random-seed\",\n        \"grass-regrowth-time\",\n        \"sheep-gain-from-food\",\n        \"wolf-gain-from-food\",\n        \"sheep-reproduce\",\n        \"wolf-reproduce\",\n    ],\n    \"bounds\": [\n        [1, 100000],\n        [20.0, 40.0],\n        [2.0, 8.0],\n        [16.0, 32.0],\n        [2.0, 8.0],\n        [2.0, 8.0],\n    ],\n}\n\n\nn = 2 ** 5  # Changed\nparam_values = sobolsample.sample(problem, n, calc_second_order=True)\n\n\nparam_values.shape\n\n(448, 6)\n\n\n\nRunning the Experiments in Parallel Using ipyparallel\n\nimport ipyparallel as ipp\n\ncluster = ipp.Cluster(n=4)\ncluster.start_cluster_sync();\n\nStarting 4 engines with &lt;class 'ipyparallel.cluster.launcher.LocalEngineSetLauncher'&gt;\n\n\n\nrc = cluster.connect_client_sync()\nrc.wait_for_engines(n=4) # Added\nrc.ids\n\n  0%|          | 0/4 [00:00&lt;?, ?engine/s] 25%|██▌       | 1/4 [00:05&lt;00:16,  5.40s/engine]100%|██████████| 4/4 [00:05&lt;00:00,  1.35s/engine]\n\n\n[0, 1, 2, 3]\n\n\n\ndirect_view = rc[:]\n\n\nimport os\n\n# Push the current working directory of the notebook to a \"cwd\" variable on the engines that can be accessed later\ndirect_view.push(dict(cwd=os.getcwd()), block=True)\n\n[None, None, None, None]\n\n\n\n# Push the \"problem\" variable from the notebook to a corresponding variable on the engines\ndirect_view.push(dict(problem=problem), block=True)\n\n[None, None, None, None]\n\n\n\n%%px\nimport os\nos.chdir(cwd)\n\nimport pynetlogo\nimport numpy as np\nimport pandas as pd\n\nnetlogo = pynetlogo.NetLogoLink(\n    gui = False,\n    thd = False,\n    netlogo_home = \"/opt/netlogo-7-0-0\"\n)\n\nnetlogo.load_model(\"./nlogox/Wolf Sheep Predation_v6.nlogox\")\n\n[stderr:0] WARNING: A restricted method in java.lang.System has been called\nWARNING: java.lang.System::load has been called by org.jpype.JPypeContext in an unnamed module (file:/home/danielvartan/Git/pynetlogo/.venv/lib/python3.13/site-packages/org.jpype.jar)\nWARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for callers in this module\nWARNING: Restricted methods will be blocked in a future release unless native access is enabled\n\nWARNING: A terminally deprecated method in sun.misc.Unsafe has been called\nWARNING: sun.misc.Unsafe::objectFieldOffset has been called by scala.runtime.LazyVals$ (file:/opt/netlogo-7-0-0/lib/app/scala3-library_3-3.7.0.jar)\nWARNING: Please consider reporting this to the maintainers of class scala.runtime.LazyVals$\nWARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release\n\n\n[stderr:1] WARNING: A restricted method in java.lang.System has been called\nWARNING: java.lang.System::load has been called by org.jpype.JPypeContext in an unnamed module (file:/home/danielvartan/Git/pynetlogo/.venv/lib/python3.13/site-packages/org.jpype.jar)\nWARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for callers in this module\nWARNING: Restricted methods will be blocked in a future release unless native access is enabled\n\nWARNING: A terminally deprecated method in sun.misc.Unsafe has been called\nWARNING: sun.misc.Unsafe::objectFieldOffset has been called by scala.runtime.LazyVals$ (file:/opt/netlogo-7-0-0/lib/app/scala3-library_3-3.7.0.jar)\nWARNING: Please consider reporting this to the maintainers of class scala.runtime.LazyVals$\nWARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release\n\n\n[stderr:3] WARNING: A restricted method in java.lang.System has been called\nWARNING: java.lang.System::load has been called by org.jpype.JPypeContext in an unnamed module (file:/home/danielvartan/Git/pynetlogo/.venv/lib/python3.13/site-packages/org.jpype.jar)\nWARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for callers in this module\nWARNING: Restricted methods will be blocked in a future release unless native access is enabled\n\nWARNING: A terminally deprecated method in sun.misc.Unsafe has been called\nWARNING: sun.misc.Unsafe::objectFieldOffset has been called by scala.runtime.LazyVals$ (file:/opt/netlogo-7-0-0/lib/app/scala3-library_3-3.7.0.jar)\nWARNING: Please consider reporting this to the maintainers of class scala.runtime.LazyVals$\nWARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release\n\n\n[stderr:2] WARNING: A restricted method in java.lang.System has been called\nWARNING: java.lang.System::load has been called by org.jpype.JPypeContext in an unnamed module (file:/home/danielvartan/Git/pynetlogo/.venv/lib/python3.13/site-packages/org.jpype.jar)\nWARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for callers in this module\nWARNING: Restricted methods will be blocked in a future release unless native access is enabled\n\nWARNING: A terminally deprecated method in sun.misc.Unsafe has been called\nWARNING: sun.misc.Unsafe::objectFieldOffset has been called by scala.runtime.LazyVals$ (file:/opt/netlogo-7-0-0/lib/app/scala3-library_3-3.7.0.jar)\nWARNING: Please consider reporting this to the maintainers of class scala.runtime.LazyVals$\nWARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release\n\n\n%px:   0%|          | 0/4 [00:00&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:00&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:00&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:00&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:00&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:00&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:00&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:00&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:00&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:00&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:01&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:01&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:01&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:01&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:01&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:01&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:01&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:01&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:01&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:01&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:02&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:02&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:02&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:02&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:02&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:02&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:02&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:02&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:02&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:02&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:03&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:03&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:03&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:03&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:03&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:03&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:03&lt;?, ?tasks/s]%px:   0%|          | 0/4 [00:03&lt;?, ?tasks/s]%px:  50%|█████     | 2/4 [00:03&lt;00:00, 19.53tasks/s]%px:  75%|███████▌  | 3/4 [00:04&lt;00:00,  8.64tasks/s]%px: 100%|██████████| 4/4 [00:04&lt;00:00,  1.04s/tasks]\n\n\n\ndef simulation(experiment):\n    # Set the input parameters\n    for i, name in enumerate(problem[\"names\"]):\n        if name == \"random-seed\":\n            # The NetLogo random seed requires a different syntax\n            netlogo.command(\"random-seed {}\".format(experiment[i]))\n        else:\n            # Otherwise, assume the input parameters are global variables\n            netlogo.command(\"set {0} {1}\".format(name, experiment[i]))\n\n    netlogo.command(\"setup\")\n    # Run for 100 ticks and return the number of sheep and wolf agents at each time step\n    counts = netlogo.repeat_report([\"count sheep\", \"count wolves\"], 100)\n\n    results = pd.Series( # Added\n        [np.mean(counts[\"count sheep\"]), np.mean(counts[\"count wolves\"])],\n        index=[\"Avg. sheep\", \"Avg. wolves\"],\n    )\n\n    # Original code:\n    #\n    # results = pd.Series(\n    #     [counts[\"count sheep\"].values.mean(), counts[\"count wolves\"].values.mean()],\n    #     index=[\"Avg. sheep\", \"Avg. wolves\"],\n    # )\n\n    return results\n\n\nlview = rc.load_balanced_view()\n\n\nresults = pd.DataFrame(lview.map_sync(simulation, param_values))\n\n\nresults.to_csv(\"./data/Sobol_parallel.csv\")\n\n\nresults.head(5)\n\n\n\n\n\n\n\n\nAvg. sheep\nAvg. wolves\n\n\n\n\n0\n101.594059\n28.465347\n\n\n1\n100.504950\n33.247525\n\n\n2\n85.574257\n20.376238\n\n\n3\n179.871287\n108.752475\n\n\n4\n104.237624\n33.504950\n\n\n\n\n\n\n\n\n\nUsing SALib for Sensitivity Analysis\n\nfig, ax = plt.subplots(1, len(results.columns), sharey=True)\n\nfor i, n in enumerate(results.columns):\n    ax[i].hist(results[n], 20)\n    ax[i].set_xlabel(n)\nax[0].set_ylabel(\"Counts\")\n\nfig.set_size_inches(10, 4)\nfig.subplots_adjust(wspace=0.1)\n\nplt.show()\n\n\n\n\n\n\n\n\n\nimport scipy\n\nnrow = 2\nncol = 3\n\nfig, ax = plt.subplots(nrow, ncol, sharey=True)\n\ny = results[\"Avg. sheep\"]\n\nfor i, a in enumerate(ax.flatten()):\n    x = param_values[:, i]\n    sns.regplot(\n        x=x,\n        y=y,\n        ax=a,\n        ci=None,\n        color=\"k\",\n        scatter_kws={\"alpha\": 0.2, \"s\": 4, \"color\": \"gray\"},\n    )\n    pearson = scipy.stats.pearsonr(x, y)\n    a.annotate(\n        \"r: {:6.3f}\".format(pearson[0]),\n        xy=(0.15, 0.85),\n        xycoords=\"axes fraction\",\n        fontsize=13,\n    )\n    if divmod(i, ncol)[1] &gt; 0:\n        a.get_yaxis().set_visible(False)\n    a.set_xlabel(problem[\"names\"][i])\n    a.set_ylim([0, 1.1 * np.max(y)])\n\nfig.set_size_inches(9, 9, forward=True)\nfig.subplots_adjust(wspace=0.2, hspace=0.3)\n\nplt.show()\n\n\n\n\n\n\n\n\n\nSi = sobol.analyze(\n    problem,\n    results[\"Avg. sheep\"].values,\n    calc_second_order=True,\n    print_to_console=False,\n)\n\n/home/danielvartan/Git/pynetlogo/.venv/lib/python3.13/site-packages/SALib/util/__init__.py:274: FutureWarning: unique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n  names = list(pd.unique(groups))\n\n\n\nSi_filter = {k: Si[k] for k in [\"ST\", \"ST_conf\", \"S1\", \"S1_conf\"]}\nSi_df = pd.DataFrame(Si_filter, index=problem[\"names\"])\n\n\nSi_df\n\n\n\n\n\n\n\n\nST\nST_conf\nS1\nS1_conf\n\n\n\n\nrandom-seed\n0.056705\n0.039673\n0.036567\n0.092495\n\n\ngrass-regrowth-time\n0.246658\n0.215558\n0.162614\n0.188970\n\n\nsheep-gain-from-food\n0.779248\n0.565153\n0.252965\n0.371308\n\n\nwolf-gain-from-food\n0.539663\n0.301630\n0.384790\n0.279285\n\n\nsheep-reproduce\n0.147828\n0.099676\n-0.049013\n0.253315\n\n\nwolf-reproduce\n0.402822\n0.229209\n0.266902\n0.352499\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1)\n\nindices = Si_df[[\"S1\", \"ST\"]]\nerr = Si_df[[\"S1_conf\", \"ST_conf\"]]\n\nindices.plot.bar(yerr=err.values.T, ax=ax)\nfig.set_size_inches(8, 4)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n%matplotlib inline\nimport itertools\nfrom math import pi\nfrom matplotlib.legend_handler import HandlerPatch\n\n\ndef normalize(x, xmin, xmax):\n    return (x - xmin) / (xmax - xmin)\n\n\ndef plot_circles(ax, locs, names, max_s, stats, smax, smin, fc, ec, lw, zorder):\n    s = np.asarray([stats[name] for name in names])\n    s = 0.01 + max_s * np.sqrt(normalize(s, smin, smax))\n\n    fill = True\n    for loc, name, si in zip(locs, names, s):\n        if fc == \"w\":\n            fill = False\n        else:\n            ec = \"none\"\n\n        x = np.cos(loc)\n        y = np.sin(loc)\n\n        circle = plt.Circle(\n            (x, y),\n            radius=si,\n            ec=ec,\n            fc=fc,\n            transform=ax.transData._b,\n            zorder=zorder,\n            lw=lw,\n            fill=True,\n        )\n        ax.add_artist(circle)\n\n\ndef filter(sobol_indices, names, locs, criterion, threshold):\n    if criterion in [\"ST\", \"S1\", \"S2\"]:\n        data = sobol_indices[criterion]\n        data = np.abs(data)\n        data = data.flatten()  # flatten in case of S2\n        # TODO:: remove nans\n\n        filtered = [(name, locs[i]) for i, name in enumerate(names) if data[i] &gt; threshold]\n        filtered_names, filtered_locs = zip(*filtered)\n    elif criterion in [\"ST_conf\", \"S1_conf\", \"S2_conf\"]:\n        raise NotImplementedError\n    else:\n        raise ValueError(\"unknown value for criterion\")\n\n    return filtered_names, filtered_locs\n\n\ndef plot_sobol_indices(sobol_indices, criterion=\"ST\", threshold=0.01):\n    \"\"\"plot sobol indices on a radial plot\n\n    Parameters\n    ----------\n    sobol_indices : dict\n                    the return from SAlib\n    criterion : {'ST', 'S1', 'S2', 'ST_conf', 'S1_conf', 'S2_conf'}, optional\n    threshold : float\n                only visualize variables with criterion larger than cutoff\n\n    \"\"\"\n    max_linewidth_s2 = 15  # 25*1.8\n    max_s_radius = 0.3\n\n    # prepare data\n    # use the absolute values of all the indices\n    # sobol_indices = {key:np.abs(stats) for key, stats in sobol_indices.items()}\n\n    # dataframe with ST and S1\n    sobol_stats = {key: sobol_indices[key] for key in [\"ST\", \"S1\"]}\n    sobol_stats = pd.DataFrame(sobol_stats, index=problem[\"names\"])\n\n    smax = sobol_stats.max().max()\n    smin = sobol_stats.min().min()\n\n    # dataframe with s2\n    s2 = pd.DataFrame(sobol_indices[\"S2\"], index=problem[\"names\"], columns=problem[\"names\"])\n    s2[s2 &lt; 0.0] = 0.0  # Set negative values to 0 (artifact from small sample sizes)\n    s2max = s2.max().max()\n    s2min = s2.min().min()\n\n    names = problem[\"names\"]\n    n = len(names)\n    ticklocs = np.linspace(0, 2 * pi, n + 1)\n    locs = ticklocs[0:-1]\n\n    filtered_names, filtered_locs = filter(sobol_indices, names, locs, criterion, threshold)\n\n    # setup figure\n    fig = plt.figure()\n    ax = fig.add_subplot(111, polar=True)\n    ax.grid(False)\n    ax.spines[\"polar\"].set_visible(False)\n\n    ax.set_xticks(locs)\n    ax.set_xticklabels(names)\n\n    ax.set_yticklabels([])\n    ax.set_ylim(top=1.4)\n    legend(ax)\n\n    # plot ST\n    plot_circles(\n        ax,\n        filtered_locs,\n        filtered_names,\n        max_s_radius,\n        sobol_stats[\"ST\"],\n        smax,\n        smin,\n        \"w\",\n        \"k\",\n        1,\n        9,\n    )\n\n    # plot S1\n    plot_circles(\n        ax,\n        filtered_locs,\n        filtered_names,\n        max_s_radius,\n        sobol_stats[\"S1\"],\n        smax,\n        smin,\n        \"k\",\n        \"k\",\n        1,\n        10,\n    )\n\n    # plot S2\n    for name1, name2 in itertools.combinations(zip(filtered_names, filtered_locs), 2):\n        name1, loc1 = name1\n        name2, loc2 = name2\n\n        weight = s2.loc[name1, name2]\n        lw = 0.5 + max_linewidth_s2 * normalize(weight, s2min, s2max)\n        ax.plot([loc1, loc2], [1, 1], c=\"darkgray\", lw=lw, zorder=1)\n\n    return fig\n\n\nclass HandlerCircle(HandlerPatch):\n    def create_artists(\n        self, legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans\n    ):\n        center = 0.5 * width - 0.5 * xdescent, 0.5 * height - 0.5 * ydescent\n        p = plt.Circle(xy=center, radius=orig_handle.radius)\n        self.update_prop(p, orig_handle, legend)\n        p.set_transform(trans)\n        return [p]\n\n\ndef legend(ax):\n    some_identifiers = [\n        plt.Circle((0, 0), radius=5, color=\"k\", fill=False, lw=1),\n        plt.Circle((0, 0), radius=5, color=\"k\", fill=True),\n        plt.Line2D([0, 0.5], [0, 0.5], lw=8, color=\"darkgray\"),\n    ]\n    ax.legend(\n        some_identifiers,\n        [\"ST\", \"S1\", \"S2\"],\n        loc=(1, 0.75),\n        borderaxespad=0.1,\n        mode=\"expand\",\n        handler_map={plt.Circle: HandlerCircle()},\n    )\n\n\nsns.set_style(\"whitegrid\")\nfig = plot_sobol_indices(Si, criterion=\"ST\", threshold=0.005)\nfig.set_size_inches(7, 7)\nplt.show()"
  },
  {
    "objectID": "index.html#example-3",
    "href": "index.html#example-3",
    "title": "pynetlogo",
    "section": "Example 3",
    "text": "Example 3\n\n\n\n\n\n\nSee the this example at: https://pynetlogo.readthedocs.io/en/latest/_docs/SALib_multiprocessing.html\n\n\n\n\nRunning the Experiments in Parallel Using a Process Pool\n\nfrom multiprocessing import Pool\nimport os\nimport pandas as pd\nimport numpy as np\n\nimport pynetlogo\n\nfrom SALib.sample import sobol as sobolsample\n\n\ndef initializer(modelfile):\n    \"\"\"initialize a subprocess\n\n    Parameters\n    ----------\n    modelfile : str\n\n    \"\"\"\n\n    # we need to set the instantiated netlogo\n    # link as a global so run_simulation can\n    # use it\n    global netlogo\n\n    netlogo = pynetlogo.NetLogoLink(\n      gui = False,\n      thd = False,\n      netlogo_home = \"/opt/netlogo-7-0-0\"\n    )\n\n    netlogo.load_model(modelfile)\n\n\ndef run_simulation(experiment):\n    \"\"\"run a netlogo model\n\n    Parameters\n    ----------\n    experiments : dict\n\n    \"\"\"\n\n    # Set the input parameters\n    for key, value in experiment.items():\n        if key == \"random-seed\":\n            # The NetLogo random seed requires a different syntax\n            netlogo.command(\"random-seed {}\".format(value))\n        else:\n            # Otherwise, assume the input parameters are global variables\n            netlogo.command(\"set {0} {1}\".format(key, value))\n\n    netlogo.command(\"setup\")\n    # Run for 100 ticks and return the number of sheep and\n    # wolf agents at each time step\n    counts = netlogo.repeat_report([\"count sheep\", \"count wolves\"], 100)\n\n    results = pd.Series( # Added\n        [np.mean(counts[\"count sheep\"]), np.mean(counts[\"count wolves\"])],\n        index=[\"Avg. sheep\", \"Avg. wolves\"],\n    )\n\n    # Original code:\n    #\n    # results = pd.Series(\n    #     [counts[\"count sheep\"].values.mean(), counts[\"count wolves\"].values.mean()],\n    #     index=[\"Avg. sheep\", \"Avg. wolves\"],\n    # )\n\n    return results\n\n\nif __name__ == \"__main__\":\n    modelfile = os.path.abspath(\"./nlogox/Wolf Sheep Predation_v6.nlogox\")\n\n    problem = {\n        \"num_vars\": 6,\n        \"names\": [\n            \"random-seed\",\n            \"grass-regrowth-time\",\n            \"sheep-gain-from-food\",\n            \"wolf-gain-from-food\",\n            \"sheep-reproduce\",\n            \"wolf-reproduce\",\n        ],\n        \"bounds\": [[1, 100000], [20.0, 40.0], [2.0, 8.0], [16.0, 32.0], [2.0, 8.0], [2.0, 8.0]],\n    }\n\n    n = 2 ** 1 # Changed\n    param_values = sobolsample.sample(problem, n, calc_second_order=True)\n\n    # cast the param_values to a dataframe to\n    # include the column labels\n    experiments = pd.DataFrame(param_values, columns=problem[\"names\"])\n\n    with Pool(4, initializer=initializer, initargs=(modelfile,)) as executor:\n        results = []\n        for entry in executor.map(run_simulation, experiments.to_dict(\"records\")):\n            results.append(entry)\n        results = pd.DataFrame(results)\n\n\nresults.head(5)\n\n\n\n\n\n\n\n\nAvg. sheep\nAvg. wolves\n\n\n\n\n0\n180.455446\n62.386139\n\n\n1\n208.336634\n50.861386\n\n\n2\n208.237624\n59.564356\n\n\n3\n167.475248\n40.495050\n\n\n4\n132.247525\n81.089109"
  },
  {
    "objectID": "index.html#session-info",
    "href": "index.html#session-info",
    "title": "pynetlogo",
    "section": "Session Info",
    "text": "Session Info\n\nimport session_info\n\nsession_info.show(cpu = True, jupyter = True, dependencies = True)\n\n\nClick to view session information\n-----\nSALib               NA\nipyparallel         9.0.1\nmatplotlib          3.10.6\nmpl_toolkits        NA\nnumpy               2.3.3\npandas              2.3.2\npynetlogo           0.5.2\nscipy               1.16.2\nseaborn             0.13.2\nsession_info        v1.0.1\n-----\n\n\nClick to view modules imported as dependencies\nPIL                 11.3.0\nasttokens           NA\ncomm                0.2.3\ncycler              0.12.1\ncython_runtime      NA\ndateutil            2.9.0.post0\ndebugpy             1.8.17\ndecorator           5.2.1\ndill                0.4.0\net_xmlfile          2.0.0\nexecuting           2.2.1\nipykernel           6.30.1\njedi                0.19.2\njpype               1.6.0\nkiwisolver          1.4.9\nmatplotlib_inline   0.1.7\nmultiprocess        0.70.18\nnetLogoLink         NA\nopenpyxl            3.1.5\npackaging           25.0\nparso               0.8.5\nplatformdirs        4.4.0\nprompt_toolkit      3.0.52\npsutil              7.1.0\npure_eval           0.2.3\npydev_ipython       NA\npydevconsole        NA\npydevd              3.2.3\npydevd_file_utils   NA\npydevd_plugins      NA\npydevd_tracing      NA\npygments            2.19.2\npyparsing           3.2.5\npytz                2025.2\nsix                 1.17.0\nstack_data          0.6.3\ntornado             6.5.2\ntqdm                4.67.1\ntraitlets           5.14.3\nwcwidth             0.2.14\nzmq                 27.1.0\n\n \n-----\nIPython             9.5.0\njupyter_client      8.6.3\njupyter_core        5.8.1\n-----\nPython 3.13.7 (main, Aug 15 2025, 12:34:02) [GCC 15.2.1 20250813]\nLinux-6.16.8-arch1-1-x86_64-with-glibc2.42\n12 logical CPU cores\n-----\nSession information updated at 2025-09-27 00:23"
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "pynetlogo",
    "section": "License",
    "text": "License\n\nThis content is licensed under CC0 1.0 Universal, placing these materials in the public domain. You may freely copy, modify, distribute, and use this work, even for commercial purposes, without permission or attribution."
  }
]